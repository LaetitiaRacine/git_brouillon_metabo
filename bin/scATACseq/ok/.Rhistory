knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library(Seurat)
library(Signac)
library(ggplot2)
library(kableExtra)
library(gridExtra)
library(grid)
library(BRGenomics) # function tidyChromosomes()
library(knitr)
# directory = "/home/rparmentier/Bureau/Git_Metabo_Analysis/"
directory = "/home/rparmentier/Bureau/git_brouillon_metabo/"
directory_exp = paste0(directory, "exp/")
directory_data = paste0(directory, "data/scATACseq/")
# Create a unique folder for output corresponding to the date of the day
current_date = format(Sys.time(), "%Y%m%d")
dir.create(path = paste0(directory_exp,"scATACseq_ind_QualityControl/"))
dir.create(path = paste0(directory_exp,"scATACseq_ind_QualityControl/", current_date))
directory_output = paste0(directory_exp, "scATACseq_ind_QualityControl/", current_date, "/")
# Load external script with functions and constantes
source(file = paste0(directory, "bin/","functions_constantes.R"))
dir = pic_last_dir(paste0(directory_exp, "scATACseq_ind_CreateSeuratObject/"))
list_seurat_obj = readRDS(paste0(dir, "/", "list_seurat_obj_annot.rds"))
number_condition = length(list_seurat_obj)
list_graphs = list()
rm(directory_exp)
# Extract number of cells and peaks
nbcells = unlist(lapply(list_seurat_obj, function(x) { ncol(x) }))
nbpeaks = unlist(lapply(list_seurat_obj, function(x) { nrow(x) }))
# Store data in a tab
df_summary = data.frame("Conditions" = names(list_seurat_obj),
"Initial_Cell_Number" = nbcells,
"Initial_Peak_Number" = nbpeaks)
df_summary %>%
kable() %>%
kable_styling()
nucleosome_qc = function(seurat_obj) {
seurat_obj = NucleosomeSignal(object = seurat_obj)
seurat_obj$nucleosome_group = ifelse(seurat_obj$nucleosome_signal > "2", 'NS > 2', 'NS < 2')
qc_plot_nucl_fragments = FragmentHistogram(object = seurat_obj) +
geom_vline(xintercept = 147, color = "red") +  # no nucleosome limit
geom_vline(xintercept = 294, color = "red") +  # one nucleosome limit
geom_vline(xintercept = 441, color = "red") +  # two nucleosomes limit
geom_vline(xintercept = 588, color = "red") +  # three nucleosomes limit
labs(title = "Nucleosome banding pattern") +
theme(title = element_text(face = "bold"))
qc_plot_nucl_signal = VlnPlot(
object = seurat_obj,
features = 'nucleosome_signal',
pt.size = 0.1) +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank()) +
geom_hline(yintercept = 2, color = "red")
qc_plot_nucl_quality = FragmentHistogram(
object = seurat_obj,
group.by = 'nucleosome_group') +
labs(title = "Nucleosome signal") +
theme(title = element_text(face = "bold"))
# Output of the function
results = list(qc_plot_nucl_fragments = qc_plot_nucl_fragments,
qc_plot_nucl_signal = qc_plot_nucl_signal,
qc_plot_nucl_quality = qc_plot_nucl_quality,
seurat_obj = seurat_obj)
return(results)
}
for (i in 1:number_condition) {
temp = nucleosome_qc(list_seurat_obj[[i]])
list_graphs[[names(list_seurat_obj[i])]] = list(
"qc_plot_nucl_fragments" = temp$qc_plot_nucl_fragments,
"qc_plot_nucl_signal" = temp$qc_plot_nucl_signal,
"qc_plot_nucl_quality" = temp$qc_plot_nucl_quality)
list_seurat_obj[[i]] = temp$seurat_obj
}
#
rm(nucleosome_qc)
# Free memory
rm(temp, nucleosome_qc)
# Free memory
rm(temp, nbcells, nbpeaks, i, nucleosome_qc)
fragments_qc = function(seurat_obj) {
seurat_obj$pct_reads_in_peaks = seurat_obj$peak_region_fragments /
seurat_obj$passed_filters * 100
seurat_obj$blacklist_ratio = seurat_obj$blacklist_region_fragments /
seurat_obj$peak_region_fragments
qc_plot_pct_reads_vln = VlnPlot(object = seurat_obj,
features = 'pct_reads_in_peaks',
pt.size = 0.1) +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank())
qc_plot_pct_reads_point = qplot(log10(seurat_obj$passed_filters),
seurat_obj$pct_reads_in_peaks) +
labs(x = "log10 # of fragments", y = "% reads in peaks") +
geom_hline(yintercept = 60, color = "firebrick") +
geom_vline(xintercept = log10(5000), color = "firebrick")
qc_plot_blacklist = VlnPlot(object = seurat_obj,
features = 'blacklist_ratio',
pt.size = 0.1) +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank())
qc_plot_peak_region_fragments = VlnPlot(object = seurat_obj,
features = 'peak_region_fragments',
pt.size = 0.1) +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_blank())
results = list(qc_plot_pct_reads_vln = qc_plot_pct_reads_vln,
qc_plot_pct_reads_point = qc_plot_pct_reads_point,
qc_plot_blacklist = qc_plot_blacklist,
qc_plot_peak_region_fragments = qc_plot_peak_region_fragments,
seurat_obj = seurat_obj)
return(results)
}
for (i in 1:number_condition) {
temp = fragments_qc(list_seurat_obj[[i]])
list_graphs[[names(list_seurat_obj[i])]] = append(
list_graphs[[names(list_seurat_obj[i])]],
list("qc_plot_pct_reads_vln" = temp$qc_plot_pct_reads_vln,
"qc_plot_pct_reads_point" = temp$qc_plot_pct_reads_point,
"qc_plot_blacklist" = temp$qc_plot_blacklist,
"qc_plot_peak_region_fragments" = temp$qc_plot_peak_region_fragments)
)
list_seurat_obj[[i]] = temp$seurat_obj
}
rm(fragments_qc)
# Very very long chunk
tss_qc = function(seurat_obj) {
seurat_obj = TSSEnrichment(object = seurat_obj, fast = FALSE)
seurat_obj$high.tss = ifelse(seurat_obj$TSS.enrichment > 2, 'High', 'Low')
seurat_obj$pct_reads_in_TSS = seurat_obj$TSS_fragments / seurat_obj$passed_filters * 100
qc_plot_tss = TSSPlot(seurat_obj, group.by = 'high.tss') +
NoLegend()
labs(title = "TSS enrichment score") +
theme(title = element_text(face = "bold"))
qc_plot_tss_reads =  qplot(seurat_obj$pct_reads_in_TSS, seurat_obj$pct_reads_in_peaks) +
labs(x = "% reads in TSS", y = "% reads in peaks") +
geom_abline(intercept = 0, slope = 1, linetype = 2, color = "firebrick")
results = list(qc_plot_tss = qc_plot_tss,
qc_plot_tss_reads = qc_plot_tss_reads,
seurat_obj = seurat_obj)
return(results)
}
for (i in 1:number_condition) {
temp = tss_qc(list_seurat_obj[[i]])
list_graphs[[names(list_seurat_obj[i])]] = append(
list_graphs[[names(list_seurat_obj[i])]],
list("qc_plot_tss" = temp$qc_plot_tss,
"qc_plot_tss_reads" = temp$qc_plot_tss_reads)
)
list_seurat_obj[[i]] = temp$seurat_obj
}
rm(temp, tss_qc)
gc()
for (i in 1:number_condition) {
grid.arrange(grobs = list_graphs[[i]],
ncol = 3,
nrow = 3,
top = textGrob(paste("QC metrics for", names(list_seurat_obj[i]))))
}
for (i in 1:number_condition) {
grid.arrange(grobs = list_graphs[[i]],
ncol = 3,
nrow = 3,
top = textGrob(paste("QC metrics for", names(list_seurat_obj[i]))))
}
for (i in 1:number_condition) {
ggsave(plot = arrangeGrob(grobs = list_graphs[[i]],
ncol = 3,
nrow = 3,
top = textGrob(paste("QC metrics for", names(list_graphs[i])))) ,
filename = paste0(directory_output, names(list_graphs[i]), "_plot_quality_control.svg"),
width = 40, height = 40)
}
# saveRDS(object = list_seurat_obj, file = paste0(directory_output, "list_seurat_obj_annot_qc.rds"))
saveRDS(object = list_graphs, file = paste0(directory_output, "list_graphs_qc.rds"))
# Initialize summary df with initial numbers of cells and peaks
vec_cell = c()
vec_peak = c()
for (i in 1:number_condition) {
vec_cell = c(vec_cell, paste0(names(list_seurat_obj[i]), "_NbCells"))
vec_peak = c(vec_peak, paste0(names(list_seurat_obj[i]), "_NbPeaks"))
}
df_filter = data.frame(
"Condition" = c(vec_cell, vec_peak),
"Initial" = c(df_summary$Initial_Cell_Number, df_summary$Initial_Peak_Number))
# Apply first filter on nucleosome signal
temp_cell = c()
temp_peak = c()
for (i in 1:number_condition) {
list_seurat_obj[[i]] =  subset(x = list_seurat_obj[[i]],
subset = nucleosome_signal < 2)
temp_cell = c(temp_cell, ncol(list_seurat_obj[[i]]))
temp_peak = c(temp_peak, nrow(list_seurat_obj[[i]]))
}
df_filter$Nucleosome_filter = c(temp_cell, temp_peak)
# Apply filter on number of fragments in cell
temp_cell = c()
temp_peak = c()
for (i in 1:number_condition) {
list_seurat_obj[[i]] =  subset(x = list_seurat_obj[[i]],
subset = peak_region_fragments > 3000 &
peak_region_fragments < 50000)
temp_cell = c(temp_cell, ncol(list_seurat_obj[[i]]))
temp_peak = c(temp_peak, nrow(list_seurat_obj[[i]]))
}
